  /*---------------------  rexx procedure  -------------------- *
  | Name:      SubPart   (for Submit with LRECL > 80)          |
  |                                                            |
  | Function:  ISPF Edit Macro to Submit to the internal       |
  |            Reader only the select parts of the data under  |
  |            ISPF Edit. LRECLs other than 80 supported.      |
  |                                                            |
  |            The ISPF Edit SUBMIT supports all these         |
  |            options *except* the first# last#.              |
  |                                                            |
  | Syntax:    subpart             (with lines selected)       |
  |         or subpart first# last#                            |
  |         or subpart first-lab last-lab                      |
  |         or subpart nx          (non-excluded records)      |
  |         or subpart *           (all records)               |
  |         or subpart ?           (tutorial)                  |
  |         or subpart             (tutorial)                  |
  |                                                            |
  | Notes:     Select the records to submit using SS/SS or S## |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            2021/12/12 LBD - Small refinement               |
  |                           - Support LRECLs other than 80   |
  |                           - Support labels                 |
  |            2021/12/11 LBD - Refinement                     |
  |            2021/12/10 LBD - Creation                       |
  |                                                            |
  * ---------------------------------------------------------- */
  Address ISREdit
  'macro NOPROCESS (opt)'

  /* --------------- *
   | Define defaults |
   * --------------- */
  parse value '' with null nx startl jcl

  /* --------------------------------------------- *
  | Check options if any then get start/end lines |
  * --------------------------------------------- */
  '(lrecl) = lrecl'
 'Process Range S'
 prange_rc = rc
  Select
    When opt = '?' then call do_tutor
    when opt = '*' then do
         '(startl) = linenum .zfirst'
         '(endl)   = linenum .zlast'
         jcl = endl
         end
    When prange_rc = 0 then do
      if rc = 0 then do
        "(startl) = linenum .zfrange"
        "(endl)   = linenum .zlrange"
      end
    end
    When words(opt) = 2 then do
      parse value opt with startl endl
      if left(startl,1) = '.'
         then '(startl) = linenum' startl
      if left(endl,1) = '.'
         then '(endl) = linenum' endl
      end
    When translate(opt) = 'NX'
      then do
        nx = 1
        '(last) = linenum .zlast'
      end
    Otherwise call do_tutor
  end

  /* ---------------------------------------------------------- *
   | Now process the data                                       |
   |   if start and end lines then process those into the stack |
   |   if NX then only do the non-excluded lines                |
   * ---------------------------------------------------------- */
  Address TSO ,
    'Newstack'
  if nx = null then
  do i = startl to endl
    '(data) = line' i
    queue data
  end
  else do i = 1 to last
    '(stat) = xstatus' i
    if stat /= 'NX' then iterate
    '(data) = line' i
    queue data
  end

  /* ---------------------------------------------------- *
   | Get number of records queued for submission and then |
   | queue a null record for end-of-file.                 |
   * ---------------------------------------------------- */
   if jcl = null then
  jcl = queued()
  queue ''

  /* ------------------------------- *
  | Do submit trapping the messages |
  * ------------------------------- */
  Address TSO
  call outtrap 'x.'
  if lrecl /= 80 then do
    'Alloc f('dd') sysout(b) writer(intrdr)',
      'Recfm(f) lrecl('lrecl') blksize('lrecl') reuse'
    'execio * diskw' dd' (finis'
    'free f('dd')'
  end
  else do
    'submit *'
  end
  call outtrap 'off'

  /* ---------------------------------- *
   | Inform the user what was submitted |
   * ---------------------------------- */
  Address ISPExec
  zedsmsg = null
  zedlmsg = null
  do i = 2 to x.0
     zedlmsg = zedlmsg''left(x.i,75)
     end
  zedlmsg = zedlmsg 'With' jcl 'lines of data submitted.'
  'Setmsg msg(isrz001)'

  Address TSO ,
    'delstack'

  Exit 0

Do_Tutor:
  Address ISPExec
  load_info = loadispf()
  'Select pgm(isptutor) parm(subparth)'
  x = dropispf(load_info)
  exit 0

/* Start of Tutorial Panel - leave this all in comments
>Start
>Panel Subparth
)attr default(%+_)
   %   type(text)  intens(high) skip(on)
   +   type(text)  intens(low)  skip(on)
   _   type(input) intens(high) caps(on) just(left) hilite(uscore)
)body expand(\\)
%Tutorial+-\-\-(%SUBPART+ - ISPF Edit Macro+)-\-\-%Tutorial
%Command ===>_ZCMD
+
%SUBPART+is an ISPF Edit command (macro) to submit JCL to the Internal Reader
+for batch processing, and is intended for datasets with LRECL > 80 as the IBM
+ISPF Edit Submit supports all but the 1st# and last# options of SUBPART.  It
+allows for the selection of which data records are to be submitted.
+
%Syntax:+   subpart                 (with lines selected)
+         or subpart 1st# last#     (e.g. 3 21)
+         or subpart 1stlab lastlab (e.g. .a .b)
+         or subpart nx             (non-excluded records)
+         or subpart *              (all records)
+         or subpart ?              (tutorial)
+         or subpart                (tutorial)
+
%Data Line Selection+is by excluding those lines that are%not+to be submitted
+and then use %subpart nx+or selecting the desired lines using %SS+or%S#+.
+
%Note:+By excluding the lines not to submit the desired lines do not have to
+be contiguous.
)Init
)Proc
)End
>End
   End of Tutorial Panel. */


/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    load_info = loadispf()                          *
 *            rc = dropispf(load_info)                        *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          rc = dropispf(load_info)                          *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            01/09/19 - Include DROPISPF routine             *
 *            08/29/17 - Fixup static values that were vars   *
 *            05/31/17 - Change default directory count       *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
      if libd = "ALTLIBC" then lib = "CLIST"
      else lib = "EXEC"
      Address TSO,
        "Altlib Deact Application("lib")"
    end
    else "libdef" libd
    address tso "free f("dd")"
  end
  return 0
